/*
Compile with:
chameleon -o generator.c --prefix ftp_generator --print-stats grammar.chm
*/

option scheduling = random;

struct Decimal {
    repeats 1..8 digit: char = '0'..'9';
}

struct IPv4Address {
    o1: Decimal;
    dot: char = '.';
    o2: Decimal;
    dot: char = '.';
    o3: Decimal;
    dot: char = '.';
    o4: Decimal;
}

struct HexChar {
    _: char = 'a'..'f', 'A'..'F', '0'..'9';
}

struct IPv6Address {
    repeats 0..4 s1: HexChar;
    sep: char = ':';
    repeats 0..4 s1: HexChar;
    sep: char = ':';
    repeats 0..4 s1: HexChar;
    sep: char = ':';
    repeats 0..4 s1: HexChar;
    sep: char = ':';
    repeats 0..4 s1: HexChar;
    sep: char = ':';
    repeats 0..4 s1: HexChar;
}

struct Root {
    ftp_command: oneof {
        /* From RFC 959 */
        user: string = "USER ftp\r\n";
        pass: string = "PASS\r\n";
        port: struct {
            cmd: string = "PORT ";
            h1: Decimal;
            _: string = ",";
            h2: Decimal;
            _: string = ",";
            h3: Decimal;
            _: string = ",";
            h4: Decimal;
            _: string = ",";
            p1: Decimal;
            _: string = ",";
            p2: Decimal;
            _: string = "\r\n";
        };
        acct: string = "ACCT ftp\r\n";
        cwd: string = "CWD uploads\r\n";
        cdup: string = "CDUP\r\n";
        smnt: string = "SMNT uploads\r\n";
        quit: string = "QUIT\r\n";
        rein: string = "REIN\r\n";
        pasv: string = "PASV\r\n";
        type: string = "TYPE A N\r\n";
        stru: string = "STRU F\r\n";
        mode: string = "MODE S\r\n";
        retr: string = "RETR file\r\n";
        stor: string = "STOR abc\r\n";
        stou: string = "STOU\r\n";
        appe: string = "APPE abc\r\n";
        allo: string = "ALLO 4096 R 1\r\n";
        rest: string = "REST marker\r\n";
        rnfr: string = "RNFR abc\r\n";
        rnto: string = "RNTO xyz\r\n";
        abor: string = "ABOR\r\n";
        dele: string = "DELE abc\r\n";
        rmd: string = "RMD abc\r\n";
        mkd: string = "MKD abc\r\n";
        pwd: string = "PWD\r\n";
        list: string = "LIST abc\r\n";
        nlst: string = "NLST abc\r\n";
        site: string = "SITE ???\r\n";
        syst: string = "SYST\r\n";
        stat: string = "STAT abc\r\n";
        help: string = "HELP ???\r\n";
        noop: string = "NOOP\r\n";
        eprt: struct {
            cmd: string = "EPRT ";
            content: oneof {
                v4: struct {
                    family: string = "|1|";
                    ip: IPv4Address;
                    sep: char = '|';
                    port: Decimal;
                    sep: char = '|';
                };
                v6: struct {
                    family: string = "|2|";
                    ip: IPv6Address;
                    sep: char = '|';
                    port: Decimal;
                    sep: char = '|';
                };
            };
            eol: string = "\r\n";
        };
        epsv: struct {
            cmd: string = "EPSV";
            optional arg: struct {
                _: char = ' ';
                _: oneof {
                    _: char = '1';
                    _: char = '2';
                    _: string = "ALL";
                };
            };
            eol: string = "\r\n";
        };
        host: struct {
            cmd: string = "HOST ";
            arg: oneof {
                domain: string = "asdf";
                ipv6: struct {
                    _: char = '[';
                    addr: IPv6Address;
                    _: char = ']';
                };
                ipv4: IPv4Address;
            };
            eol: string = "\r\n";
        };
        rang: struct {
            cmd: string = "RANG ";
            start: Decimal;
            _: char = ' ';
            end: Decimal;
            eol: string = "\r\n";
        };
    };
}
