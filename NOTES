- What does it take to effectively fuzz network applications?
    - packet-based vs. monolithic inputs
    - state-graph ?
    - which additional algorithms come into play? state selector, ...
        - in how far can we adapt state of the art algos (MOpt, cmplog, etc.) into stateful fuzzing
    - maximize throughput
    - better input generation / mutation operators
    - applicability: can it fuzz clients like curl as well as servers ?
    - how to track state: responses vs. variables
    - what about state that is preserved across executions like fs?

Testcase scheduling:
- Pick an underutilized state
- Call other schedulers on the subset of the testcases reaching the selected state
- MinimizerScheduler ?

Reproduce: CVE-2020-9273 in ProFTPD
  - patch: https://github.com/Sashan/proftpd/commit/e845abc1bd86eebec7a0342fded908a1b0f1996b
  - vulnerable commit: 9fb4ee81c65026c7c0a6b19b8b3540f30b9bb5fd
  - part of oss-fuzz but they only fuzz some custom JSON parser there ???

FTP:
  - PASV: open(1)
  - STOR(data): send(0), send(1), close(1)
  - RETR: send(0)
  
Next: Add connection stack to libdragonfly and specify in dragonfly which packet shall be sent over which connection on stack.
      If required connection is not open then skip packet.

Input:
- sequence of TextTokens
    - Constant: constant that shall not be internally mutated
    - Number: A number in decimal string representation
    - Whitespace: one or more of whitespaces
    - Text: just a container for ascii bytes that can be mutated
    - Blob: like Text but also binary content allowed
- "USER ftp\r\n" => Constant("USER"), Whitespace(" "), Text("ftp"), Constant("\r\n")
- "PORT 127,0,0,1,123,234\r\n" => Constant("PORT"), Whitespace(" "), Number("127"), Text(","), Number("0"), ...
- utf-{8,16,32} support

Mutators:
- ~~number interesting mutator~~
- ~~split up~~
- AFL mutators for binary
- ~~duplicate~~
- ~~swap tokens~~
- ~~copy token to some random position~~
- ~~delete~~
- ~~dictionary insert~~
- ~~random any insert with random content~~
- crossover
    - inside tokenstream
    - between tokenstreams
    - between packets
    - between inputs
- ~~invert case~~
- all uppercase
- all lowercase
- ~~insert special chars~~
- ~~replace special chars~~
- ~~stretch out (repeat char)~~
- ~~rotate alphabet~~
- ~~random insert~~
- ~~delete content in tokens~~
- ~~scanner mutator => scan for numbers/whitespace in text~~
- ~~transform constant into text or blob~~
- replacement mutators also for subslice not entire token
- ~~more transforms between types~~

TODO:
- desyscall: gethostbyname(), sleep(), usleep()
